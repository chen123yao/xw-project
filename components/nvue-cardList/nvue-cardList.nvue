<template>
	<view class="card">
		<view>
			<video  :src="item.mp4_url" @click="handleClick(index)"
				:id="'video'+index" :controls='false' muted :poster='item.hot_image' :show-center-play-btn='false'
				ref="chunleiVideo" class="video" objectFit="fill" v-if="item.mp4_url" :header="header1"></video>
			<image class="images" :src="item.hot_image" v-else></image>
		</view>
		<view class="tags">
			<!-- <text class="tag" v-for="(v,i) in item.selling_point.split(',')" :key="i">#{{v}}</text> -->
			<text class="tag">{{item.one_word.length>26?item.one_word.slice(0,24)+'..':item.one_word}}</text>
		</view>
		<view class="gameDetail">
			<text class="gamename">{{item.gamename}}</text>
			<view class="star_cnt">
				<text class="star_cntText">{{item.star_cnt}}</text>
			</view>
		</view>
		<view class="listBottom">
			<text class="text"> 开服 |</text>
			<text class="type text" v-for="(v,i) in item.type" :key="i">{{v}}</text>
			<text class="user_cnt text">| {{item.user_cnt}}在玩</text>

		</view>

	</view>
</template>

<script>
	import { $api } from '@/config/api.js';
	
	export default {
		data() {
			header1: {
				referer: '1234',
			}
		}
		props: ['item'],
		mounted() {
			this.getEncryptURL()
		},
		methods: {
			getEncryptURL() {
				$api.get("/system/get_encrypt_url").then(res => {
					this.header1.referer = res.data.data.encrypt
				
					let key64 = 'asd321zxc456qwe'
					let string = this.base64_decode(this.header1.referer)
					let len = key64.length
					let code = ''
					for (let i = 0; i < string.length; i++) {
						let k = i % len
						code += String.fromCharCode(string.charCodeAt(i) ^ key64.charCodeAt(k))
					}
					this.header1.referer = this.base64_decode(code)
				})
			},
			
			base64_decode(data) {
				let b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
				let o1, o2, o3, h1, h2, h3, h4, bits, i = 0
				let ac = 0
				let dec = ""
				let tmp_arr = []
				if (!data) {
					return data
				}
				data += ''
				do { // unpack four hexets into three octets using index points in b64
					h1 = b64.indexOf(data.charAt(i++))
					h2 = b64.indexOf(data.charAt(i++))
					h3 = b64.indexOf(data.charAt(i++))
					h4 = b64.indexOf(data.charAt(i++))
					bits = h1 << 18 | h2 << 12 | h3 << 6 | h4
					o1 = bits >> 16 & 0xff
					o2 = bits >> 8 & 0xff
					o3 = bits & 0xff
					if (h3 == 64) {
						tmp_arr[ac++] = String.fromCharCode(o1)
					} else if (h4 == 64) {
						tmp_arr[ac++] = String.fromCharCode(o1, o2)
					} else {
						tmp_arr[ac++] = String.fromCharCode(o1, o2, o3)
					}
				} while (i < data.length)
				dec = tmp_arr.join('')
				return dec
			},
		}
	}
</script>

<style scoped>
	.card {
		margin: 20rpx 0rpx;
		border-radius: 20rpx;
		border: 5rpx solid #eee;
		overflow: hidden
	}

	.images {
		/* width: 500rpx; */
		height: 400rpx;
		border-top-left-radius: 20rpx;
		border-top-right-radius: 20rpx;
	}

	.tags {
		margin-top: 20rpx;
		flex-direction: row;
		align-items: center;
		margin-left: 30rpx;
	}

	.tag {
		color: #666666;
		font-weight: 300;
		font-size: 24rpx;
		lines: 1;
		padding: 4rpx 20rpx;
		border-radius: 20rpx;
		background-color: #e1e1e1;

	}

	.gameDetail {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 10rpx 30rpx;
	}

	.gamename {
		color: #1C1C1C;
		font-weight: 900;
		font-size: 40rpx;
	}

	.star_cntText {
		color: #FF5927;
		font-weight: 900;
		font-size: 42rpx;
	}

	.listBottom {
		flex-direction: row;
		align-items: center;
		padding: 0 30rpx 20rpx 30rpx;
	}

	.type {
		margin: 0 6rpx;
	}

	.text {
		color: #666666;
		font-size: 26rpx;
	}
</style>
