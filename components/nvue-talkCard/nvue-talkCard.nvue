<template>
		<view class="card">
			<image class="icon" :src="icon_bg"></image>
			<view class="rates">
				<image style="position: absolute;" class="pics" :src="icon"></image>
				<text class="text1"><{{name.length>12?name.slice(0,11)+'..':name}}>聊吧</text>
				<text class="text2">{{item.post_num}}聊帖 • {{item.online_num}}人在吧</text>
			</view>
		</view>
</template> 

<script>
	const BindingX = uni.requireNativePlugin('bindingx');
	import myloading from '@/components/nvue-loading/nvue-loading'
	import { $api } from '@/config/api.js';
	import common from "@/common/js/common.js";
	export default {
		components: {
			myloading
		},
		data() {
			return {
				icon_bg:'',
				icon:'',
				name:'',
				isTrue: true,
				pageData: [],
				isNumber: 0,
				isNoData:false,
				active: 0,
				count:0,
				x:0,
				y:0,
				active1: 0,
				isradius: true,
				// direction: -90,
				scale:0,
				refreshing: false,
				loadinging: false,
				isrefre: false,
				times:0,
				imgactive:-1,
				formData:{
					is_mp4: 1,
					offset: 10,
					page:1
				},
				
				header1: {
					referer: '1234',
				}

			}
		},
		props: {
			item: {
				type: Object,
				default: () => {}
			},
			list1:{
				type: Array,
				default:''
			},
			// srcurl: {
			// 	type: String
			// },
			// iconData:{
			// 	type:Object,
			// 	default:()=>{
			// 		return {};
			// 	}
			// }
			// type: {
			// 	type: Number,
			// 	default: 0
			// },
			// itemIndex: {
			// 	type: Number,
			// 	default: 1
			// }
			myHeight: {
				type: Number
			},
			myWidth: {
				type: Number
			},
			wifiAuto:{
				default:false
			}
		},
		mounted() {
			
		},
		methods: {
			// getEncryptURL() {
			// 	$api.get("/system/get_encrypt_url").then(res => {
			// 		this.header1.referer = res.data.data.encrypt
				
			// 		let key64 = 'asd321zxc456qwe'
			// 		let string = this.base64_decode(this.header1.referer)
			// 		let len = key64.length
			// 		let code = ''
			// 		for (let i = 0; i < string.length; i++) {
			// 			let k = i % len
			// 			code += String.fromCharCode(string.charCodeAt(i) ^ key64.charCodeAt(k))
			// 		}
			// 		this.header1.referer = this.base64_decode(code)
			// 	})
			// },
			
			base64_decode(data) {
				let b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
				let o1, o2, o3, h1, h2, h3, h4, bits, i = 0
				let ac = 0
				let dec = ""
				let tmp_arr = []
				if (!data) {
					return data
				}
				data += ''
				do { // unpack four hexets into three octets using index points in b64
					h1 = b64.indexOf(data.charAt(i++))
					h2 = b64.indexOf(data.charAt(i++))
					h3 = b64.indexOf(data.charAt(i++))
					h4 = b64.indexOf(data.charAt(i++))
					bits = h1 << 18 | h2 << 12 | h3 << 6 | h4
					o1 = bits >> 16 & 0xff
					o2 = bits >> 8 & 0xff
					o3 = bits & 0xff
					if (h3 == 64) {
						tmp_arr[ac++] = String.fromCharCode(o1)
					} else if (h4 == 64) {
						tmp_arr[ac++] = String.fromCharCode(o1, o2)
					} else {
						tmp_arr[ac++] = String.fromCharCode(o1, o2, o3)
					}
				} while (i < data.length)
				dec = tmp_arr.join('')
				return dec
			},
		
			// getSpecialData() {
			// 	$api.get('/game/multilistnew', {
			// 		...this.formData,
			// 		client_id:this.$store.state.client_id
			// 	}).then(res => {
			// 		this.pageData = this.pageData.concat(res.data.data.list)  
			// 		this.count = res.data.data.count
					
			// 		this.pageData.forEach((item) => {
			// 			item.mp4_url_new = common.setVideoUrl(item.mp4_url);
			// 		})
					
			// 		setTimeout(()=>{
			// 		this.loadinging = false;
			// 		this.bind()  
			// 		},100)
			// 		this.isNoData = true
			// 	})

			// },
			
			//下拉刷新
			onpullingdown(e) {
				// this.pageData = []
               // this.getSpecialData()
			},
			//刷新
			Refresh(data) {
				this.isrefre = ture
				if (data) {
					// this.getSpecialData()
				}
			},
			
			onrefresh() {
				this.refreshing = true
				setTimeout(() => {
				// this.getSpecialData()
					// this.resetLoadMore()
					this.refreshing = false;
				}, 1000)
			},
			// 重置 loadmore
			resetLoadMore() {
				this.$refs.list.resetLoadmore();
			
			},
			//加载
	       loadmore(){
			 if(this.count>Object.keys(this.pageData).length){
			  this.loadinging = true
			    this.formData.page++
			     // this.getSpecialData()
			 	}
		    },
			//路由跳转
			handleRouter(id) {
				uni.navigateTo({
					url: `/pages/talkAbout/children/zboDetail?id=${id}`
				})
			},

			// clearMove() {
			// 	if(this.$refs.chunleiVideo){
			// 	const myVideo = this.$refs.chunleiVideo
			// 		myVideo.forEach((item, i) => {
			// 			item.pause()
			// 		})
			// 	}
			// },
			//视频加载完成
			loadedmetadata(e,i){		
				let a = false
				if(this.$store.state.platform=='ios'){
			       new Promise((resolve,reject)=>{
					 setTimeout(()=>{
					   if(Object.keys(e).length){
                         resolve(a)
								}
							   },1100)	 
						      }).then(res=>{
					 a = true
					 if(a){
						this.imgactive = i
						 } 
				    })
								
				}else{
					setTimeout(()=>{
					this.imgactive = i
					},100)
				}
			
			},

			//动画
			bind() {
				let anchor = this.getEl(this.$refs.list);
				let titleLine = this.getEl(this.$refs.titleLine);
				let res = BindingX.bind({
					anchor: anchor,
					eventType: 'scroll',
					props: [{
							element: titleLine,
							property: 'background-color', //动画属性
							expression: 'evaluateColor("#ffffff","#dddddd", min(y, 500)/500)' //表达式 说明了y从0-400,对应的值是1-0  
						},
						// {
						// 	element: recommend,
						// 	property: 'background-color', //动画属性
						// 	expression: 'evaluateColor("#ffffff","#f3f3f3", min(y, 500)/500)' //表达式 说明了y从0-400,对应的值是1-0  
						// },
					]
				}, (e) => {
					// if (e.state === 'turn') {
					// 	this.bind();
					// }
				});
			},
		//动画
		binds(ref, property, expression, type) {
			let rotatebin = BindingX.bind({
				eventType: 'timing',
				exitExpression: 't>300',
				props: [ //props数组用来描述伴随scroll事件需要改变的元素节点
					{
						element: ref, //动画元素
						property: property, //动画属性
						expression: expression
					}
		
				]
			}, e => {
				if (e.state === 'start') {
					setTimeout(()=>{
					BindingX.unbind({
						token: rotatebin.token,
						eventType: 'timing'
					})
						
					},300)
				}
			});
		},
		
			//触摸开始
			touchstart(index, event) {
			
				if (this.isradius) {
					this.active1 = index
					// this.active = index
					this.isradius = false
					if (event.touches[0].screenY > 300) {
						this.y = event.touches[0].screenY / 2 -80
					} else {
						this.y = event.touches[0].screenY-50
					}
					this.x = event.touches[0].screenX
					setTimeout(() => {
						this.radiusBin(index)
					}, 100)
				} else {
					
				}
			},

			//滚动结束位置
			scrollend(e){
			if(this.active!=Math.round(Math.abs(e.contentOffset.y)/(620*this.myWidth/750))){
			   	this.imgactive = -1
				this.active = Math.round(Math.abs(e.contentOffset.y)/(620*this.myWidth/750))
				 setTimeout(()=>{
				   // this.imgactive = this.active
			     	},700)	
				}
			

			},
			//触摸结束
			touchend(index, event){
				// console.log(index, event,'index, eventindex, eventindex, event')
			},

			radiusBin(index) {
				// this.opacity = .2
				this.scale = 140
				let card = this.getEl(this.$refs.card[index]);
				let touchRidus = this.getEl(this.$refs.touchRidus[index]);
				let touchBind = BindingX.bind({
					eventType: 'timing',
					exitExpression: 't>500',
					props: [{
						element: touchRidus,
						property: 'transform.scale', //动画属性
						expression: `linear(t,1,${this.scale},500)`
					},
					{
						element: touchRidus,
						property: 'opacity', //动画属性
						expression: `linear(t,0,.2,500)`
					},
					{
						element: touchRidus,
						property: 'opacity', //动画属性
						expression: `linear(t,.2,-.4,700)`
					},					 
					 ]
				}, e => {
				     	this.scale = 0
					if (e.state == 'start') {
						setTimeout(() => {
							this.isradius = true
							BindingX.unbind({
								token: touchBind.token,
								eventType: 'timing'
							})
						}, 800)
						
					}

				})
			},

			getEl(el) {
				if (typeof el === 'string' || typeof el === 'number') return el;
				if (WXEnvironment) {
					return el.ref;
				} else {
					return el instanceof HTMLElement ? el : el.$el;
				}
			},

		},
		filters: {
			// 1.日期格式过滤器
			dateFormat(value, fmt) {
				let getDate = new Date(value * 1000);
				let o = {
					"M+": getDate.getMonth() + 1,
					"d+": getDate.getDate(),
					"h+": getDate.getHours(),
					"m+": getDate.getMinutes(),
					"s+": getDate.getSeconds(),
					"q+": Math.floor((getDate.getMonth() + 3) / 3),
					S: getDate.getMilliseconds(),
				};
				if (/(y+)/.test(fmt)) {
					fmt = fmt.replace(
						RegExp.$1,
						(getDate.getFullYear() + "").substr(4 - RegExp.$1.length)
					);
				}
				for (let k in o) {
					if (new RegExp("(" + k + ")").test(fmt)) {
						fmt = fmt.replace(
							RegExp.$1,
							RegExp.$1.length === 1 ?
							o[k] :
							("00" + o[k]).substr(("" + o[k]).length)
						);
					}
				}
				return fmt;
			}
		},
		watch:{
			item(val){
				if(val){
					this.icon_bg = val.ext_info.hot_image
					this.icon = val.game.icon
					this.name = val.name
				}
			}
		}
	}
</script>

<style scoped>
	@import '@/common/css/nvue-whith.css';

	.rates {
		align-items: center;
		position: absolute;
		/* box-shadow: 0 1rpx 1rpx rgba(0,0,0,0.5); */
		background-color:  rgba(0, 0, 0, 0.4);
		height: 168rpx;
		width: 750rpx;
		left:0;
		bottom: 0;
		/* overflow: hidden; */
	}
	
	.pics{
		position: absolute;
		width: 136rpx;
		height: 136rpx;
		left: 32rpx;
		bottom: 16rpx;
		border-radius: 40rpx;
	}

	.rateText {
		font-size: 24rpx;
		color: #fff;
		position: absolute;
		left: 30rpx;
		top: 16rpx
	}

	.rateimages {
		width: 130rpx;
		height: 80rpx;
		margin-left: 14rpx;
	}

	.touchRidus {
		position: absolute;
		width: 20rpx;
		height: 20rpx;
		border-radius: 20rpx;
		background-color: #333;
		opacity: 0;

	}

	.radius {
		width: 100rpx;
		height: 100rpx;
		position: absolute;
		background-color: #fff;


	}

	.images {
		position: absolute;
		border-top-left-radius: 20rpx;
		border-top-right-radius: 20rpx;

	}
	.chunleiVideo{
		border-top-left-radius: 20rpx;
		border-top-right-radius: 20rpx;
		
	}

	.card {
		height: 414rpx;
		position: relative;
		overflow: hidden;
	}
	.cover-view{
		 border-top-left-radius: 20rpx;
		 border-top-right-radius: 20rpx;
	     overflow: hidden;


	}
	

	.coverimages {
		position: absolute;
	}

	.tags {
		margin-top: 20rpx;
		flex-direction: row;
		align-items: center;
		margin-left: 30rpx;
		position: relative;
	}

	.tagImage {
		position: absolute;
		top: 8rpx;
		left: 12rpx;
	}

	.tag {
		color: #666666;
		font-weight: 300;
		font-size: 24rpx;
		lines: 1;
		padding: 4rpx 20rpx 4px 45rpx;
		border-radius: 20rpx;
		background-color: #F4F4F4;

	}

	.gameDetail {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 0 30rpx;
		margin: 14rpx 0;
	}

	.gamename {
		color: #1C1C1C;
		font-weight: 900;
		font-size: 40rpx;
	}

	.star_cnt {
		flex-direction: row;
		align-items: center;
	}

	.star_cntText {
		color: #FF5927;
		font-weight: 700;
		font-size: 42rpx;
		margin-left: 16rpx;
	}

	.listBottom {
		flex-direction: row;
		align-items: center;
		padding: 0 30rpx 20rpx 30rpx;
	}

	.type {
		margin: 0 6rpx;
	}

	.text {
		color: #666666;
		font-size: 26rpx;
	}

	.titleLine {
		height: 2rpx;


	}
	.icon{
			width: 750rpx;
			height: 414rpx;
			/* #ifndef APP-PLUS-VUE */
			/* position: absolute; */
	/* 		top: 0;
			left: 0; */
			/* #endif */
		}
		.box-content-icon {
			display: flex;
			padding: 0 30rpx;
			flex-direction: row;
			flex-wrap: wrap;
			justify-content: space-between;
		}
		
		.text1{
			position: absolute;
			left: 192rpx;
			bottom: 84rpx;
			font-size: 36rpx;
			font-weight: 700;
			color: #FFFFFF;
		}
		.text2{
			position: absolute;
			left: 192rpx;
			bottom: 34rpx;
			font-size: 24rpx;
			font-weight: 400; 
			color: #FFFFFF;
		}
</style>
